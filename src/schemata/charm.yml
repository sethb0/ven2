$schema: http://json-schema.org/draft-07/schema#
$id: https://venator.sharpcla.ws/schema/charm.json

##### BEGIN DEFINITIONS SECTION #####
definitions:
  prerequisites:
    type: object
    properties:
      charms:
        type: array
        items:
          $ref: 'common.json#/definitions/charmReference'
        uniqueItems: true
      essence:
        $ref: 'common.json#/definitions/positiveInteger'
      excellencies:
        $ref: 'common.json#/definitions/positiveInteger'
      groups:
        type: array
        items:
          type: object
          properties:
            threshold:
              $ref: 'common.json#/definitions/positiveInteger'
            charms:
              type: array
              items:
                $ref: 'common.json#/definitions/charmReference'
              uniqueItems: true
              minItems: 2
          required: ['threshold', 'charms']
      traits:
        type: object
        additionalProperties:
          $ref: 'common.json#/definitions/positiveInteger'
##### END DEFINITIONS SECTION #####

##### BEGIN SCHEMA #####
allOf:
- type: object
  properties:
    action:
      $ref: 'common.json#/definitions/nonEmptyString'
    cost:
      $ref: 'common.json#/definitions/nonEmptyString'
    description:
      type: string
    duration:
      $ref: 'common.json#/definitions/nonEmptyString'
    edge cost:
      $ref: 'common.json#/definitions/positiveInteger'
    edges:
      type: object
      additionalProperties:
        $ref: 'common.json#/definitions/nonEmptyString'
      minProperties: 1
    errata:
      $ref: 'common.json#/definitions/true'
    exalt:
      $ref: 'common.json#/definitions/nonEmptyString'
    excellency:
      $ref: 'common.json#/definitions/true'
    group:
      $ref: 'common.json#/definitions/nonEmptyString'
    house-ruled:
      $ref: 'common.json#/definitions/true'
    id:
      $ref: 'common.json#/definitions/idString'
    keywords:
      type: object
      additionalProperties:
        oneOf:
        - $ref: 'common.json#/definitions/nonNegativeInteger'
        - $ref: 'common.json#/definitions/true'
    lotus root:
      $ref: 'common.json#/definitions/true'
    martial:
      type: object
      properties:
        Archery:
          $ref: 'common.json#/definitions/true'
        Martial Arts:
          $ref: 'common.json#/definitions/true'
        Melee:
          $ref: 'common.json#/definitions/true'
        Thrown:
          $ref: 'common.json#/definitions/true'
      minProperties: 1
    martial-ready:
      $ref: 'common.json#/definitions/true'
    name:
      $ref: 'common.json#/definitions/nonEmptyString'
    prerequisites:
      allOf:
      - $ref: '#/definitions/prerequisites'
      - required: ['essence']
    raises Essence cap:
      $ref: 'common.json#/definitions/true'
    raises trait cap:
      $ref: 'common.json#/definitions/true'
    repurchases:
      type: object
      oneOf:
      - properties:
          limit:
            oneOf:
            - $ref: 'common.json#/definitions/positiveInteger'
            - $ref: 'common.json#/definitions/nonEmptyString'
            - type: array
              items:
                $ref: 'common.json#/definitions/nonEmptyString'
              minItems: 1
          required:
            $ref: 'common.json#/definitions/true'
        required: ['limit']
      - properties:
          when:
            type: array
            items:
              type: object
              additionalProperties:
                $ref: 'common.json#/definitions/positiveInteger'
              minProperties: 1
            minItems: 1
        required: ['when']
    source:
      $ref: 'common.json#/definitions/nonEmptyString'
    taint:
      type: object
      additionalProperties:
        $ref: 'common.json#/definitions/nonNegativeInteger'
      minProperties: 1
    transcends cap:
      $ref: 'common.json#/definitions/true'
    treat as:
      enum:
      - Terrestrial Martial Arts
      - Celestial Martial Arts
      - Sidereal Martial Arts
    type:
      enum:
      - charm
      - generic
      - knack
      - proxy
    variants:
      type: array
      items:
        type: object
        properties:
          id:
            $ref: 'common.json#/definitions/idString'
          name:
            $ref: 'common.json#/definitions/nonEmptyString'
          prerequisites:
            $ref: '#/definitions/prerequisites'
        required: ['id', 'name']
      minItems: 1
    virtue:
      type: object
      properties:
        Compassion:
          $ref: 'common.json#/definitions/true'
        Conviction:
          $ref: 'common.json#/definitions/true'
        Temperance:
          $ref: 'common.json#/definitions/true'
        Valor:
          $ref: 'common.json#/definitions/true'
      propertyNames:
        enum: ['Compassion', 'Conviction', 'Temperance', 'Virtue']
      minProperties: 1
  required: ['id', 'type']
- if:
    properties:
      type:
        const: proxy
  then:
    properties:
      variant:
        $ref: 'common.json#/definitions/idString'
    propertyNames:
      enum: ['id', 'name', 'type', 'variant']
  else:
    not:
      required: ['variant']
- if:
    required: ['edge cost']
  then:
    required: ['edges']
  else:
    not:
      required: ['edges']
- if:
    required: ['excellency']
  then:
    properties:
      type:
        const: generic
- if:
    required: ['martial-ready']
  then:
    required: ['martial']
- if:
    properties:
      keywords:
        required: ['Taint']
    required: ['keywords']
  then:
    required: ['taint']
  else:
    not:
      required: ['taint']
##### END SCHEMA #####
